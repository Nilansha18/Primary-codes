#include <iostream>
using namespace std;

//you can also use class
struct Node{
	int data;
	Node *next;
};
 
 
Node *newNode(int val){
	Node *temp = new Node;
	temp->data = val;
	temp->next = NULL;
	return temp;
}


 Node *createLinkedList(int n){
 	int a; //this variable will be used to read the input from user
 	
 	Node *head = NULL; 
 	Node *tail = NULL; 
 	for(int i=0;i<n;i++){
 		cin>>a; 
 		Node *temp = newNode(a); 
 		
 		
 		if(head==NULL){
 			head = temp;
 			tail = temp;
 		}
 		else{
 			tail->next = temp; 
 			tail = temp;
 		}
 	}
 	
 	return head;
 }
int findsize(Node *head){
	int c=0;
	while(head!=NULL){
		head=head->next;
		c++;
	}
	return c;
}
 

void printLinkedList(Node *head){
	while(head!=NULL){
		cout<<head->data<<"-> ";
		head = head->next;
	}
	cout<<"null"<<endl;
}


Node *mergeTwoSortedLinkedList(Node *head1, Node *head2){
	Node *head = NULL; 
 	Node *tail = NULL;
 	Node *temp;
    while(head1!=NULL && head2!=NULL){
    	if((head1->data)<=(head2->data)){
    	    temp=head1; 
 		    if(head==NULL){
 			    head = temp;
 			    tail = temp;
 		    }
 		    else{
 			    tail->next = temp; 
 			    tail = temp;
 	    	}
 			head1=head1->next; 
    	}
        else {
            temp=head2; 
 		    if(head==NULL){
 			    head = temp;
 			    tail = temp;
 		    }
 		    else{
 			    tail->next = temp; 
 			    tail = temp;
 	    	}
 			head2=head2->next;
        }
    }
    if(head1!=NULL) tail->next=head1;
    if(head2!=NULL) tail->next=head2;
    
    return head;
}

int main() {
	int n,m;
	cin>>n>>m;
	Node* head1 =createLinkedList(n);
	cout<<"first linkedList: "; 
	printLinkedList(head1);
	cout<<findsize(head1)<<endl;
	
	Node* head2 = createLinkedList(m);
	cout<<"second linkedList: "; 
	printLinkedList(head2);
	cout<<findsize(head2)<<endl;
	Node *head= mergeTwoSortedLinkedList(head1, head2);
	
	cout<<"sorted linkedList: "; 
	printLinkedList(head);
	return 0;
}
